local service = "3316";   --Set your Platoboost Id 
local secret = "e765fff9-ce55-4772-8eb0-e16c63b363ae"; --Set Your Platoboost Api key
local useNonce = true; 
local onMessage = function(message)  game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { Text = message; }) end;


repeat task.wait(1) until game:IsLoaded() or game.Players.LocalPlayer;


local requestSending = false;
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request, string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local cachedLink, cachedTime = "", 0;
local HttpService = game:GetService("HttpService")

function lEncode(data)
	return HttpService:JSONEncode(data)
end
function lDecode(data)
	return HttpService:JSONDecode(data)
end
local function lDigest(input)
	local inputStr = tostring(input)


	local hash = {}
	for i = 1, #inputStr do
		table.insert(hash, string.byte(inputStr, i))
	end

	local hashHex = ""
	for _, byte in ipairs(hash) do
		hashHex = hashHex .. string.format("%02x", byte)
	end

	return hashHex
end
local host = "https://api.platoboost.com";
local hostResponse = fRequest({
	Url = host .. "/public/connectivity",
	Method = "GET"
});
if hostResponse.StatusCode ~= 200 and hostResponse.StatusCode ~= 429 then
	host = "https://api.platoboost.net";
end

function cacheLink()
	if cachedTime + (10*60) < fOsTime() then
		local response = fRequest({
			Url = host .. "/public/start",
			Method = "POST",
			Body = lEncode({
				service = service,
				identifier = lDigest(fGetHwid())
			}),
			Headers = {
				["Content-Type"] = "application/json"
			}
		});

		if response.StatusCode == 200 then
			local decoded = lDecode(response.Body);

			if decoded.success == true then
				cachedLink = decoded.data.url;
				cachedTime = fOsTime();
				return true, cachedLink;
			else
				onMessage(decoded.message);
				return false, decoded.message;
			end
		elseif response.StatusCode == 429 then
			local msg = "you are being rate limited, please wait 20 seconds and try again.";
			onMessage(msg);
			return false, msg;
		end

		local msg = "Failed to cache link.";
		onMessage(msg);
		return false, msg;
	else
		return true, cachedLink;
	end
end



cacheLink();

local generateNonce = function()
	local str = ""
	for _ = 1, 16 do
		str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
	end
	return str
end


for _ = 1, 5 do
	local oNonce = generateNonce();
	task.wait(0.2)
	if generateNonce() == oNonce then
		local msg = "platoboost nonce error.";
		onMessage(msg);
		error(msg);
	end
end

local copyLink = function()
	local success, link = cacheLink();

	if success then
		print("SetClipBoard")
		fSetClipboard(link);
	end
end

local redeemKey = function(key)
	local nonce = generateNonce();
	local endpoint = host .. "/public/redeem/" .. fToString(service);

	local body = {
		identifier = lDigest(fGetHwid()),
		key = key
	}

	if useNonce then
		body.nonce = nonce;
	end

	local response = fRequest({
		Url = endpoint,
		Method = "POST",
		Body = lEncode(body),
		Headers = {
			["Content-Type"] = "application/json"
		}
	});

	if response.StatusCode == 200 then
		local decoded = lDecode(response.Body);
		if decoded.success == true then
			if decoded.data.valid == true then
				if useNonce then
					if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
						return true;
					else
						onMessage("failed to verify integrity.");
						return false;
					end    
				else
					return true;
				end
			else
				onMessage("key is invalid.");
				return false;
			end
		else
			if fStringSub(decoded.message, 1, 27) == "unique constraint violation" then
				onMessage("you already have an active key, please wait for it to expire before redeeming it.");
				return false;
			else
				onMessage(decoded.message);
				return false;
			end
		end
	elseif response.StatusCode == 429 then
		onMessage("you are being rate limited, please wait 20 seconds and try again.");
		return false;
	else
		onMessage("server returned an invalid status code, please try again later.");
		return false; 
	end
end


local verifyKey = function(key)
	if requestSending == true then
		onMessage("a request is already being sent, please slow down.");
		return false;
	else
		requestSending = true;
	end

	local nonce = generateNonce();
	local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key;

	if useNonce then
		endpoint = endpoint .. "&nonce=" .. nonce;
	end
	local response = fRequest({
		Url = endpoint,
		Method = "GET",
	});

	requestSending = false;

	if response.StatusCode == 200 then
		local decoded = lDecode(response.Body);
		if decoded.success == true then
			if decoded.data.valid == true then
				if useNonce then
					return true;
				else
					return true;
				end
			else
				if fStringSub(key, 1, 4) == "FREE_" then
					return redeemKey(key);
				else
					onMessage("key is invalid.");
					return false;
				end
			end
		else
			onMessage(decoded.message);
			return false;
		end
	elseif response.StatusCode == 429 then
		onMessage("you are being rate limited, please wait 20 seconds and try again.");
		return false;
	else
		onMessage("server returned an invalid status code, please try again later.");
		return false;
	end
end


local getFlag = function(name)
	local nonce = generateNonce();
	local endpoint = host .. "/public/flag/" .. fToString(service) .. "?name=" .. name;

	if useNonce then
		endpoint = endpoint .. "&nonce=" .. nonce;
	end

	local response = fRequest({
		Url = endpoint,
		Method = "GET",
	});

	if response.StatusCode == 200 then
		local decoded = lDecode(response.Body);
		if decoded.success == true then
			if useNonce then
				if decoded.data.hash == lDigest(fToString(decoded.data.value) .. "-" .. nonce .. "-" .. secret) then
					return decoded.data.value;
				else
					onMessage("failed to verify integrity.");
					return nil;
				end
			else
				return decoded.data.value;
			end
		else
			onMessage(decoded.message);
			return nil;
		end
	else
		return nil;
	end
end

task.spawn(function()



	local ScreenGui = Instance.new("ScreenGui")
	local Frame = Instance.new("Frame")
	local Topbar = Instance.new("Frame")
	local Exit = Instance.new("TextButton")
	local minimize = Instance.new("TextButton")
	local Frame_2 = Instance.new("Frame")
	local TextLabel = Instance.new("TextLabel")
	local Checkkey = Instance.new("TextButton")
	local GetKey = Instance.new("TextButton")
	local TextBox = Instance.new("TextBox")



	ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	Frame.Parent = ScreenGui
	Frame.BackgroundColor3 = Color3.fromRGB(49, 49, 49)
	Frame.BackgroundTransparency = 0.350
	Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame.BorderSizePixel = 0
	Frame.Position = UDim2.new(0.261333346, 0, 0.277533054, 0)
	Frame.Size = UDim2.new(0, 357, 0, 201)

	Topbar.Name = "Topbar"
	Topbar.Parent = Frame
	Topbar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Topbar.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Topbar.BorderSizePixel = 0
	Topbar.Size = UDim2.new(0, 357, 0, 28)

	Exit.Name = "Exit"
	Exit.Parent = Topbar
	Exit.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	Exit.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Exit.BorderSizePixel = 0
	Exit.Position = UDim2.new(0.89635855, 0, 0, 0)
	Exit.Size = UDim2.new(0, 31, 0, 28)
	Exit.Font = Enum.Font.SourceSans
	Exit.Text = "X"
	Exit.TextColor3 = Color3.fromRGB(0, 0, 0)
	Exit.TextScaled = true
	Exit.TextSize = 22.000
	Exit.TextWrapped = true

	minimize.Name = "minimize"
	minimize.Parent = Topbar
	minimize.BackgroundColor3 = Color3.fromRGB(17, 255, 0)
	minimize.BorderColor3 = Color3.fromRGB(0, 0, 0)
	minimize.BorderSizePixel = 0
	minimize.Position = UDim2.new(0.787114859, 0, 0, 0)
	minimize.Size = UDim2.new(0, 31, 0, 28)
	minimize.Font = Enum.Font.SourceSans
	minimize.Text = "-"
	minimize.TextColor3 = Color3.fromRGB(0, 0, 0)
	minimize.TextScaled = true
	minimize.TextSize = 22.000
	minimize.TextWrapped = true

	Frame_2.Parent = Frame
	Frame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_2.BackgroundTransparency = 1.000
	Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_2.BorderSizePixel = 0
	Frame_2.Position = UDim2.new(0, 0, 0.139303476, 0)
	Frame_2.Size = UDim2.new(0, 357, 0, 173)

	TextLabel.Parent = Frame_2
	TextLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	TextLabel.BackgroundTransparency = 0.500
	TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel.BorderSizePixel = 0
	TextLabel.Position = UDim2.new(0.212885156, 0, 0.161849707, 0)
	TextLabel.Size = UDim2.new(0, 205, 0, 46)
	TextLabel.Font = Enum.Font.SourceSans
	TextLabel.Text = "In put Your Key"
	TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel.TextSize = 32.000
	TextLabel.TextWrapped = true

	Checkkey.Name = "Checkkey"
	Checkkey.Parent = Frame_2
	Checkkey.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Checkkey.BackgroundTransparency = 0.600
	Checkkey.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Checkkey.BorderSizePixel = 0
	Checkkey.Position = UDim2.new(0.0700280145, 0, 0.653179169, 0)
	Checkkey.Size = UDim2.new(0, 136, 0, 40)
	Checkkey.Font = Enum.Font.SourceSans
	Checkkey.Text = "CheckKey"
	Checkkey.TextColor3 = Color3.fromRGB(0, 0, 0)
	Checkkey.TextSize = 14.000

	GetKey.Name = "GetKey"
	GetKey.Parent = Frame_2
	GetKey.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	GetKey.BackgroundTransparency = 0.600
	GetKey.BorderColor3 = Color3.fromRGB(0, 0, 0)
	GetKey.BorderSizePixel = 0
	GetKey.Position = UDim2.new(0.540616274, 0, 0.653179169, 0)
	GetKey.Size = UDim2.new(0, 136, 0, 40)
	GetKey.Font = Enum.Font.SourceSans
	GetKey.Text = "Getkey"
	GetKey.TextColor3 = Color3.fromRGB(0, 0, 0)
	GetKey.TextSize = 14.000

	TextBox.Parent = GetKey
	TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TextBox.BackgroundTransparency = 0.700
	TextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TextBox.BorderSizePixel = 0
	TextBox.Position = UDim2.new(-0.860294104, 0, -2.125, 0)
	TextBox.Size = UDim2.new(0, 205, 0, 46)
	TextBox.Font = Enum.Font.SourceSans
	TextBox.Text = ""
	TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
	TextBox.TextSize = 32.000


	TextBox:GetPropertyChangedSignal("Text"):Connect(function(text)
		if TextBox.Text == "" then
			TextLabel.Text = "In Put Your Key"
		else
			TextLabel.Text = TextBox.Text
		end
	end)

-- Connecte le bouton GetKey
GetKey.MouseButton1Click:Connect(function()
	copyLink()
	onMessage("Link copied to clipboard!")
end)

local keyVerified = false  -- Initialement non vérifiée

local HttpService = game:GetService("HttpService")
local keyVerified = false  -- Initialement non vérifiée

-- Fonction pour charger les données JSON depuis une variable locale
local function loadKeyData()
    local success, data = pcall(function()
        return HttpService:JSONDecode(game:GetService("DataStoreService"):GetDataStore("KeyVerification"):GetAsync("keyVerificationData"))
    end)
    if success and data then
        return data.keyVerified or false
    else
        return false  -- Par défaut, la clé n'est pas vérifiée
    end
end

-- Fonction pour sauvegarder l'état de la clé dans un "fichier JSON"
local function saveKeyData()
    local data = {
        keyVerified = keyVerified
    }
    local jsonData = HttpService:JSONEncode(data)
    local success, errorMessage = pcall(function()
        game:GetService("DataStoreService"):GetDataStore("KeyVerification"):SetAsync("keyVerificationData", jsonData)
    end)
    if not success then
        warn("Erreur de sauvegarde JSON : " .. errorMessage)
    end
end

-- Récupère l'état de la clé depuis le stockage
keyVerified = loadKeyData()

Checkkey.MouseButton1Click:Connect(function()
    local key = TextBox.Text
    if verifyKey(key) then
        if not keyVerified then
            onMessage("Key verified! Access granted.")
            keyVerified = true  -- Marque la clé comme vérifiée
            Frame.Visible = false  -- Cache l'interface utilisateur

            -- Sauvegarde de l'état de vérification dans le "fichier JSON"
            saveKeyData()

            -- Charge le script
            loadstring(game:HttpGet('https://raw.githubusercontent.com/Berusse/farmgame/refs/heads/main/lua', true))()
        else
            onMessage("Key already verified! Access granted.")  -- Message si la clé a déjà été vérifiée
        end
    else
        TextBox.Text = "Invalid Key!"
        TextBox.TextColor3 = Color3.fromRGB(255, 0, 0)
    end
end)



	Exit.MouseButton1Down:Connect(function()
		if ScreenGui then
			ScreenGui:Destroy()

		end
	end)

	minimize.MouseButton1Down:Connect(function()
		if ScreenGui then
			ScreenGui.Enabled = false

		end
	end)
end)
